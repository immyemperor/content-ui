'use client';

import { useAuth } from '@/components/providers/AuthProvider';
import { topicService } from '@/services/topic';
import { Question } from '@/types/topic';
import { useRouter } from 'next/navigation';
import { FormEvent, useEffect, useState } from 'react';

export default function SearchTopicPage() {
  const { user, isLoading } = useAuth();
  const router = useRouter();
  const [topic, setTopic] = useState('');
  const [isSearching, setIsSearching] = useState(false);
  const [error, setError] = useState('');
  const [questions, setQuestions] = useState<Question[]>([]);
  const [isSaving, setIsSaving] = useState(false);

  useEffect(() => {
    if (isLoading) return; // Still loading
    
    if (!user) {
      router.push('/login');
    }
  }, [user, isLoading, router]);

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    if (!topic.trim()) return;

    setIsSearching(true);
    setError('');
    try {
      const result = await topicService.searchTopic(topic);
      setQuestions(result.questions);
    } catch (err) {
      setError('Failed to generate questions. Please try again.');
    } finally {
      setIsSearching(false);
    }
  };

  const handleSave = async () => {
    if (questions.length === 0) return;

    setIsSaving(true);
    try {
      await topicService.saveTopic({
        id: '', // Will be generated by backend
        name: topic,
        questions
      });
      router.push('/content');
    } catch (err) {
      setError('Failed to save questions. Please try again.');
    } finally {
      setIsSaving(false);
    }
  };

  if (isLoading) {
    return (
      <div className="flex min-h-screen items-center justify-center p-4">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (!user) {
    return <div>Redirecting to login...</div>;
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="max-w-3xl mx-auto">
        <div className="flex items-center mb-8">
          <button
            onClick={() => router.back()}
            className="mr-4 text-gray-600 hover:text-gray-900"
          >
            ‚Üê Back
          </button>
          <h1 className="text-3xl font-bold text-gray-900">Search Topic</h1>
        </div>

        <form onSubmit={handleSubmit} className="mb-8">
          <div className="flex gap-4">
            <input
              type="text"
              value={topic}
              onChange={(e) => setTopic(e.target.value)}
              placeholder="Enter a topic to generate questions"
              className="flex-1 px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
              required
            />
            <button
              type="submit"
              disabled={isSearching}
              className="bg-indigo-600 text-white px-6 py-2 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:bg-indigo-400"
            >
              {isSearching ? 'Searching...' : 'Search'}
            </button>
          </div>
        </form>

        {error && (
          <div className="mb-4 text-red-500 text-center">{error}</div>
        )}

        {questions.length > 0 && (
          <div className="bg-white shadow rounded-lg p-6">
            <h2 className="text-xl font-semibold mb-4">Generated Questions</h2>
            <div className="space-y-6">
              {questions.map((question, index) => (
                <div key={index} className="border-b pb-4 last:border-b-0">
                  <p className="font-medium mb-2">
                    {index + 1}. {question.text}
                  </p>
                  {question.options && (
                    <ul className="list-disc list-inside ml-4 space-y-1">
                      {question.options.map((option, optIndex) => (
                        <li key={optIndex} className="text-gray-700">
                          {option}
                        </li>
                      ))}
                    </ul>
                  )}
                  {question.correctAnswer && (
                    <p className="text-green-600 mt-2">
                      Correct Answer: {question.correctAnswer}
                    </p>
                  )}
                </div>
              ))}
            </div>
            <div className="mt-6 flex justify-end">
              <button
                onClick={handleSave}
                disabled={isSaving}
                className="bg-green-600 text-white px-6 py-2 rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 disabled:bg-green-400"
              >
                {isSaving ? 'Saving...' : 'Save Questions'}
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
